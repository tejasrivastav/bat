#!/usr/bin/env node

"use strict";

var fs              = require("fs"),
    readline        = require("readline"),
    commandLineArgs = require("command-line-args"),
    getUsage        = require("command-line-usage"),
    _               = require("lodash");

var BAT = require("../lib/bat");

var CLI               = commandLineArgs([{
      name : "help",
      alias: "h",
      type : Boolean
    }, {
      name : "src",
      alias: "s",
      type : String
    }, {
      name : "out",
      alias: "o",
      type : String
    }]),
    optionDefinitions = [{
      name       : "help",
      description: "Display CLI help",
      alias      : "h",
      type       : Boolean
    }, {
      name       : "src",
      description: "State Budget CSV file e.g. 7-states-budgets.csv",
      alias      : "s",
      type       : String
    }, {
      name       : "out",
      description: "State Budget JSON file e.g. 7-states-budgets.json",
      alias      : "o",
      type       : String
    }],
    options           = {
      title      : "The BAT Transform",
      description: "Transforms state budget CSV to JSOn",
      footer     : ""
    };

var main = function (options) {
  var validOptions = _.chain(["src"])
        .reduce(function (condition, option) {
          return condition && _.get(options, option);
        }, true)
        .isEmpty()
        .valueOf(),
      lineNumber   = 0,
      parsedRows   = [],
      lineReader,
      statesHeader,
      yearsHeader;

  if (validOptions) {
    console.log(getUsage(optionDefinitions, options));
    process.exit(1);
  }

  lineReader = readline.createInterface({
    input: fs.createReadStream(options["src"])
  });

  lineReader.on("line", function (line) {
    switch (lineNumber) {
      case 0 :
        statesHeader = BAT.parser.stateHeaderParser.parse(line);
        break;
      case 1 :
        yearsHeader = BAT.parser.yearsHeaderParser.parse(statesHeader, line);
        break;
      default:
        parsedRows.push(BAT.parser.indicatorAmountsRowParser.parse(yearsHeader, line));
        break;
    }
    lineNumber += 1;
  }).on("close", function () {
    var parsedJSON = JSON.stringify(BAT.postParseOperation(parsedRows), null, 2);
    if (_.isEmpty(options["out"])) {
      console.log(parsedJSON);
      return;
    }

    fs.writeFile(options["out"], parsedJSON, function (err) {
      if (err) {
        console.error(err);
        process.exit(2);
      }

      console.log("Parsed JSON saved at " + options["out"]);
    });
  });
};

main(CLI.parse());
